package rvapi

import "net/url"

const (
	// ProblemMediaTypeJSON is the default media type for a Problem response
	MediaTypeProblemJSON = "application/problem+json"
)

type ProblemType struct {
	// Type is a URI reference [RFC3986] that identifies the
	// problem type. This specification encourages that, when
	// dereferenced, it provide human-readable documentation for the
	// problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When
	// this member is not present, its value is assumed to be
	// "about:blank".
	Type string `json:"type"`

	// Title is a short, human-readable summary of the problem
	// type.  It SHOULD NOT change from occurrence to occurrence of the
	// problem, except for purposes of localization (e.g., using
	// proactive content negotiation; see [RFC7231], Section 3.4).
	Title string `json:"title"`
}

func NewProblemType(typeUrl, title string) (ProblemType, error) {
	u, err := url.Parse(typeUrl)
	if err != nil {
		return ProblemType{}, err
	}

	return ProblemType{
		Type:  u.String(),
		Title: title,
	}, nil
}

func MustProblemType(p ProblemType, err error) ProblemType {
	if err != nil {
		panic(err)
	}
	return p
}

// ProblemDetails is the struct definition of a problem details object
type ProblemDetails struct {
	ProblemType

	// Status is the HTTP status code ([RFC7231], Section 6)
	// generated by the origin server for this occurrence of the problem.
	Status int `json:"status,omitempty"`

	// Detail is a human-readable explanation specific to this
	// occurrence of the problem.
	// If present, it ought to focus on helping the client
	// correct the problem, rather than giving debugging information.
	Detail string `json:"detail,omitempty"`

	// Instance is a URI reference that identifies the specific
	// occurrence of the problem.  It may or may not yield further
	// information if dereferenced.
	Instance string `json:"instance,omitempty"`

	// Problem type definitions MAY extend the problem details object with
	// additional members.
	// Clients consuming problem details MUST ignore any such extensions
	// that they don't recognize; this allows problem types to evolve and
	// include additional information in the future.
	Extensions interface{} `json:"extensions,omitempty"`
}

func NewProblemDetails(p ProblemType, code int, detail, instance string, extensions interface{}) ProblemDetails {
	return ProblemDetails{
		ProblemType: p,
		Status:      code,
		Detail:      detail,
		Instance:    instance,
		Extensions:  extensions,
	}
}
